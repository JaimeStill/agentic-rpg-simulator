# Scenario Schema Definition
# Defines the structure and validation rules for adventure scenarios

$schema: "http://json-schema.org/draft-07/schema#"
title: "RPG Adventure Scenario"
description: "Configuration schema for RPG adventure scenarios"
type: object
required:
  - number_of_agents
  - number_of_events
  - theme
  - scenario
  - max_event_tokens
  - action_cost
  - mechanic_cost
  - description_budget
  - complexity_mix
  - character_evolution_rate
  - world_persistence
  - mechanic_learning

properties:
  # Core Scenario Properties
  number_of_agents:
    type: integer
    minimum: 1
    maximum: 6
    description: "Number of characters in the adventure party"
    
  number_of_events:
    type: integer
    minimum: 5
    maximum: 20
    description: "Total number of events in the adventure"
    
  theme:
    type: string
    description: "The world setting and genre"
    examples:
      - "Fantasy"
      - "Sci-Fi"
      - "Cyberpunk"
      - "Mystery"
      - "Post-Apocalyptic"
      - "Superhero"
      - "Horror"
      - "Steampunk"
      - "Historical"
      
  scenario:
    type: string
    minLength: 20
    maxLength: 500
    description: "The initial situation that launches the adventure"

  # Token Management
  max_event_tokens:
    type: integer
    default: 2000
    minimum: 1000
    maximum: 3000
    description: "Maximum tokens allowed per event"
    
  action_cost:
    type: integer
    default: 150
    minimum: 50
    maximum: 300
    description: "Token cost per character action"
    
  mechanic_cost:
    type: integer
    default: 200
    minimum: 100
    maximum: 400
    description: "Token cost per mechanic resolution"
    
  description_budget:
    type: integer
    default: 300
    minimum: 200
    maximum: 500
    description: "Token budget for event setup descriptions"

  # Complexity Distribution
  complexity_mix:
    type: object
    required: ["low", "medium", "high"]
    properties:
      low:
        type: number
        minimum: 0
        maximum: 100
        description: "Percentage of low complexity events"
      medium:
        type: number
        minimum: 0
        maximum: 100
        description: "Percentage of medium complexity events"
      high:
        type: number
        minimum: 0
        maximum: 100
        description: "Percentage of high complexity events"
    additionalProperties: false
    # Note: Should sum to 100%, validated at runtime

  # Evolution Settings
  character_evolution_rate:
    type: string
    enum: ["slow", "moderate", "rapid"]
    default: "moderate"
    description: "How quickly characters change and develop"
    
  world_persistence:
    type: string
    enum: ["low", "high"]
    default: "high"
    description: "How much consequences carry forward between events"
    
  mechanic_learning:
    type: boolean
    default: true
    description: "Whether game mechanics adapt to player patterns"

  # Optional Scenario-Specific Settings
  starting_heat:
    type: integer
    minimum: 0
    description: "Initial threat or attention level (scenario-specific)"
    
  faction_reputation:
    type: object
    description: "Starting reputation with various factions"
    additionalProperties:
      type: integer
      minimum: -100
      maximum: 100
      
  key_locations:
    type: array
    items:
      type: string
    description: "Important locations in the scenario"
    
  potential_complications:
    type: array
    items:
      type: string
    description: "Possible plot twists or complications"

  # Generation Metadata
  generation_mode:
    type: string
    enum: ["Guided", "Random", "Curated"]
    description: "How the scenario was created"
    
  generation_date:
    type: string
    format: date
    description: "When the scenario was generated"
    
  scenario_author:
    type: string
    description: "Creator of the scenario"
    
  difficulty_rating:
    type: string
    enum: ["Novice", "Moderate", "Challenging", "Hard", "Veteran", "Epic"]
    description: "Recommended player experience level"

# Additional validation rules
allOf:
  - if:
      properties:
        complexity_mix:
          type: object
    then:
      properties:
        complexity_mix:
          # Runtime validation should ensure low + medium + high = 100